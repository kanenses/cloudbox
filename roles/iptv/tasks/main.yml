---
  - name: "Get {{user}} uid"
    shell: "id -u {{user}}"
    register: uid
    when: uid is not defined

  - name: "Get {{user}} gid"
    shell: "id -g {{user}}"
    register: gid
    when: gid is not defined

  - name: Stop and remove any existing container
    docker_container:
      name: tvheadend
      state: absent

  - name: Create required directories
    file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=true"
    with_items:
      - /opt/tvheadend
      - /opt/tvheadend/data

  - name: Create and start tvheadend container
    docker_container:
      name: tvheadend
      image: "linuxserver/tvheadend:release-4.2"
      published_ports:
        - "127.0.0.1:9981:9981"
        - "9982:9982"
      env:
        PUID: "{{uid.stdout}}"
        PGID: "{{gid.stdout}}"
        VIRTUAL_HOST: "tvheadend.{{domain}}"
        VIRTUAL_PORT: 9981
        LETSENCRYPT_HOST: "tvheadend.{{domain}}"
        LETSENCRYPT_EMAIL: "{{email}}"
      volumes:
        - "/etc/localtime:/etc/localtime:ro"
        - "/opt/tvheadend:/config"
      networks:
        - name: cloudbox
          ipv4_address: 172.18.0.20
          aliases:
            - tvheadend
      restart_policy: always
      state: started

  - name: Wait 10 seconds
    wait_for:
      timeout: 10

  - name: tvheadend apt update
    shell: "docker exec -it tvheadend apk update"

  - name: tvheadend apt install jq
    shell: "docker exec -it tvheadend apk add jq"

  - name: Check sstv-request-token.sh exists
    stat:
      path: /opt/tvheadend/sstv-request-token.sh
    register: sstv_request_token

  - name: Import sstv-request-token.sh
    copy: "src=sstv-request-token.sh dest=/opt/tvheadend/sstv-request-token.sh force=yes owner={{user}} group={{user}} mode=0775"
    when: sstv_request_token.stat.exists == False

  - name: Import sstv-play.sh
    copy: "src=sstv-play.sh dest=/opt/tvheadend/sstv-play.sh force=yes owner={{user}} group={{user}} mode=0775"
    